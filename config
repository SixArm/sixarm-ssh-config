##
# SixArm SSH config
#
# ## Installation ##
#
# This file typically is copied to your own home directory:
#
#     mkdir -p ~/.ssh
#     cp ~/.ssh/config ~/.ssh/config.backup
#     cp config ~/.ssh/config
#
# ## Help ##
#
# For details about these settings:
#
#     man ssh_config
#     man sshd_config
#
# Links to the man pages:
#
#   * http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man5/ssh_config.5
#   * http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man5/sshd_config.5
#
# ## Organization ##
#
# SSH expects all its configuration information in one file.
#
# We like to organize our SSH config files by using a directory:
#
#     mkdir -p ~/.ssh/config.d
#
# We copy this file to a filename that we know will sort first:
#
#     cp ssh_config ~/.ssh/config.d/0.config
#
# We create any subdirectories and any files:
#
#     edit ~/.ssh/config.d/a/b/c.config
#     edit ~/.ssh/config.d/x/y/z.config
#
# Then we generate the main file by joining all the directory's files:
#
#     find ~/.ssh/config.d -name '*.config' -exec cat {} \; > ~/.ssh/config
#
# ## Tracking ##
#
# Package: sixarm-ssh-config
# Version: 3.0.0
# Created: 2015-06-30
# Updated: 2022-06-27
# License: GPL-2.0-or-later, or for a custom license contact us
# Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)
##

# SendEnv
#
# Specifies what variables from the local environ(7) should be sent to
# the server. Note that environment passing is only supported for
# protocol 2. The server must also support it, and the server must be
# configured to accept these environment variables.
#
# Note that the TERM environment variable is always sent whenever a
# pseudo-terminal is requested as it is required by the protocol.
#
# Refer to sshd_config(5) AcceptEnv for how to configure the server.
#
# Variables are specified by name, which may contain wildcard
# characters. Multiple environment variables may be separated by
# whitespace or spread across multiple SendEnv directives.
#
# The default is not to send any environment variables.
#
# Comment:
#
# We want to send our locale settings, e.g. our languages.
#
SendEnv LANG LC_*

# Sets a timeout interval in seconds after which if no data has been
# received from the server, ssh(1) will send a message through the
# encrypted channel to request a response from the server. The default
# is 0, indicating that these messages will not be sent to the server.
# This option applies to protocol version 2 only.
#
# Comment:
#
# This helps prevent disconnects.
#
# Equivalent to the ClientAlive* settings on the server.
#
ServerAliveInterval 60

# ServerAliveCountMax
#
# Sets the number of server alive messages (see below) which may be
# sent without ssh(1) receiving any messages back from the server. If
# this threshold is reached while server alive messages are being sent,
# ssh will disconnect from the server, terminating the session. It is
# important to note that the use of server alive messages is very
# different from TCPKeepAlive (below). The server alive messages are
# sent through the encrypted channel and therefore will not be
# spoofable. The TCP keepalive option enabled by TCPKeepAlive is
# spoofable. The server alive mechanism is valuable when the client or
# server depend on knowing when a connection has become inactive. The
# default value is 3. If, for example, ServerAliveInterval (see below)
# is set to 15 and ServerAliveCountMax is left at the default, if the
# server becomes unresponsive, ssh will disconnect after approximately
# 45 seconds. This option applies to protocol version 2 only.
#
ServerAliveCountMax 120

# TCPKeepAlive
#
# Specifies whether the system should send TCP keepalive messages to the
# other side. If they are sent, death of the connection or crash of one of
# the machines will be properly noticed. However, this means that
# connections will die if the route is down temporarily, and some people
# find it annoying.
#
# The default is "yes" (to send TCP keepalive messages), and the client
# will notice if the network goes down or the remote host dies. This is
# important in scripts, and many users want it too.
#
# To disable TCP keepalive messages, the value should be set to "no".
#
# Comment:
#
# TCPKeepAlive is dumb. It forces sessions to terminate after a time out.
# ClientAlive settings are probably closer to what most people want.
#
# http://www.noah.org/wiki/SSH_config
#
TCPKeepAlive no

# Compression
#
# Specifies whether compression is allowed or not.
#
# The argument must be “yes” or “no”. The default is “no”.
#
# Comment Pro:
#
# Simple compression is easy for modern CPUs, and even on a fast
# network it is faster to compress data first before sending it over
# the network instead of leaving it uncompressed.
#
# How much faster is it? I used `cat some-50mb-long.log` to output the
# content of a 50mb log file directly to my ssh session and saw 3x speed
# on compressed data of a normal web server log file.
#
# http://blog.tcs.de/speed-up-ssh-connections-with-compression-on-os-x/
#
# Comment Con:
#
# When copying some large files between hosts at our rack I noticed
# some pretty poor transfer speeds. Having recently forked out $70 for
# a rack mount gigabit switch I wondered what was slowing things.
#
# It seems ssh was trying to help out by compressing everything
# however compressing the data took more than twice as long as
# transferring the uncompressed data. I proved this by disabling
# compression at the commandline and seeing the transfer speed more
# than triple.
#
# http://codemode.blogspot.com/2006/12/ssh-default-compression-can-slow-you.html
#
# Comment Con:
#
# Consider the disastrous impact of ssh's traffic compression, which
# surprisingly slows down the transfer of roughly 42% in the case of
# scp and even 270% in the tar over ssh test, and the tar gzip
# compression, which results in transfers being 87% faster over ssh
# and 134.38% over nc.
#
# http://www.spikelab.org/blog/transfer-largedata-scp-tarssh-tarnc-compared.html
#
# Comment Advice:
#
# These days, for most people, I'd suggest using it only as needed,
# typically for links of less than 5-10mbps and only when passing a
# lot of bulk data (transfers of not-already-compressed files, X11 or
# VNC forwarding, things like that).
#
# http://askubuntu.com/questions/6770/does-ssh-use-any-compression
#
# Conclusion:
#
# We set compression off. When we want compression, on a case-by-case basis,
# we set it per host, or set it on the command line by using the -C flag.
#
Compression no

# This fixes slow logins. Don't use this if you use Kerberos or GSSAPI.
GSSAPIAuthentication no

# Allow agent authentication to chain through more than one server.
ForwardAgent yes

# This is equivalent to -X `ssh` option -- limited X11.
ForwardX11 yes

# This is equivalent to -Y `ssh` option -- unlimited X11. This can be compromise security.
# Note that both ForwardX11 and ForwardX11Trusted must be set to yes to silently compromise security.
# If you set only ForwardX11Trusted to yes then you still must use the '-Y' option on the ssh command-line.
#ForwardX11Trusted yes

# SSH by default automatically presents a public key to the server when
# trying to authenticate. If the server doesn't know that key, then SSH
# tries the next one. You can enumerate all of someone's keys this way.
#
# To disable this sort of behavior you can disable SSH from sending keys
# automatically, then tell SSH which identity files need to be sent.
#
# In your .ssh/config, something like:
#
#     # Ignore SSH keys unless specified in Host subsection
#     IdentitiesOnly yes
#
#     # Send your public key to example.com
#     Host example.com
#     IdentityFile ~/.ssh/id_rsa
#
# This is also handy if you're security conscious and like to use a different
# private/public key pair for each host you have an account with, such as:
#
#     Host foo.com
#     IdentityFile ~/.ssh/foo_rsa
#
#     Host bar.com
#     IdentityFile ~/.ssh/bar_rsa
#
# For details and credit see https://news.ycombinator.com/item?id=10004678
#
IdentitiesOnly yes

##
# The rest of this file is the /etc/ssh/sshd_config 
# original file provided by macOS Monterey 12.4.
##

#	$OpenBSD: ssh_config,v 1.35 2020/07/17 03:43:42 dtucker Exp $

# This is the ssh client system-wide configuration file.  See
# ssh_config(5) for more information.  This file provides defaults for
# users, and the values can be changed in per-user configuration files
# or on the command line.

# Configuration data is parsed as follows:
#  1. command line options
#  2. user-specific file
#  3. system-wide file
# Any configuration value is only changed the first time it is set.
# Thus, host-specific definitions should be at the beginning of the
# configuration file, and defaults at the end.

# This Include directive is not part of the default ssh_config shipped with
# OpenSSH. Options set in the included configuration files generally override
# those that follow.  The defaults only apply to options that have not been
# explicitly set.  Options that appear multiple times keep the first value set,
# unless they are a multivalue option such as IdentityFile.
Include /etc/ssh/ssh_config.d/*

# Site-wide defaults for some commonly used options.  For a comprehensive
# list of available options, their meanings and defaults, please see the
# ssh_config(5) man page.

# Host *
#   ForwardAgent no
#   ForwardX11 no
#   PasswordAuthentication yes
#   HostbasedAuthentication no
#   GSSAPIAuthentication no
#   GSSAPIDelegateCredentials no
#   BatchMode no
#   CheckHostIP yes
#   AddressFamily any
#   ConnectTimeout 0
#   StrictHostKeyChecking ask
#   IdentityFile ~/.ssh/id_rsa
#   IdentityFile ~/.ssh/id_dsa
#   IdentityFile ~/.ssh/id_ecdsa
#   IdentityFile ~/.ssh/id_ed25519
#   Port 22
#   Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes128-cbc,3des-cbc
#   MACs hmac-md5,hmac-sha1,umac-64@openssh.com
#   EscapeChar ~
#   Tunnel no
#   TunnelDevice any:any
#   PermitLocalCommand no
#   VisualHostKey no
#   ProxyCommand ssh -q -W %h:%p gateway.example.com
#   RekeyLimit 1G 1h
#   UserKnownHostsFile ~/.ssh/known_hosts.d/%k
Host *
    SendEnv LANG LC_*

# XAuthLocation added by XQuartz (https://www.xquartz.org)
Host *
    XAuthLocation /opt/X11/bin/xauth

