##
# SSH config
#
# For details about these settings:
#
#     man ssh_config
#     man sshd_config
#
# Links to the man pages:
#
#  * http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man5/ssh_config.5
#  * http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man5/sshd_config.5
#
##

# OpenSSH TCPKeepAlive
#
# Specifies whether the system should send TCP keepalive messages to the
# other side. If they are sent, death of the connection or crash of one of
# the machines will be properly noticed. However, this means that
# connections will die if the route is down temporarily, and some people
# find it annoying.
#
# The default is "yes" (to send TCP keepalive messages), and the client
# will notice if the network goes down or the remote host dies. This is
# important in scripts, and many users want it too.
#
# To disable TCP keepalive messages, the value should be set to "no".
#
# Commentary:
#
# TCPKeepAlive is dumb. It forces sessions to terminate after a time out.
# ClientAlive settings are probably closer to what most people want.
#
# http://www.noah.org/wiki/SSH_config
#
TCPKeepAlive no

# Compression
#
# Specifies whether compression is allowed, or delayed until the user
# has authenticated successfully.
#
# The argument must be "yes", "delayed", or "no".
#
# The default is "delayed". (N.b. this seems to vary on systems.)
#
# Commentary Pro:
#
# Simple compression is easy for modern CPUs, and even on a fast
# network it is faster to compress data first before sending it over
# the network instead of leaving it uncompressed.
#
# How much faster is it? I used `cat some-50mb-long.log` to output the
# content of a 50mb log file directly to my ssh session and saw 3x speed
# on compressed data of a normal web server log file.
#
# http://blog.tcs.de/speed-up-ssh-connections-with-compression-on-os-x/
#
# Commentary Con:
#
# When copying some large files between hosts at our rack I noticed
# some pretty poor transfer speeds. Having recently forked out $70 for
# a rack mount gigabit switch I wondered what was slowing things.
#
# It seems ssh was trying to help out by compressing everything
# however compressing the data took more than twice as long as
# transferring the uncompressed data. I proved this by disabling
# compression at the commandline and seeing the transfer speed more
# than triple.
#
# http://codemode.blogspot.com/2006/12/ssh-default-compression-can-slow-you.html
#
# Commentary Con:
#
# Consider the disastrous impact of ssh's traffic compression, which
# surprisingly slows down the transfer of roughly 42% in the case of
# scp and even 270% in the tar over ssh test, and the tar gzip
# compression, which results in transfers being 87% faster over ssh
# and 134.38% over nc.
#
# http://www.spikelab.org/blog/transfer-largedata-scp-tarssh-tarnc-compared.html
#
# Commentary Advice:
#
# These days, for most people, I'd suggest using it only as needed,
# typically for links of less than 5-10mbps and only when passing a
# lot of bulk data (transfers of not-already-compressed files, X11 or
# VNC forwarding, things like that).
#
# http://askubuntu.com/questions/6770/does-ssh-use-any-compression
#
# Conclusion:
#
# We set compression off. When we want compression, on a case-by-case basis,
# we set it per host, or set it on the command line by using the -C flag.
#
Compression no
#CompressionLevel 6

# OpenSSH ClientAliveInterval
#
# Sets a timeout interval in seconds after which if no data has been
# received from the client, sshd will send a message through the
# encrypted channel to request a response from the client.
#
# The default is 0, indicating  messages will not be sent to the client.
#
# This option applies to protocol version 2 only.
#
# Commentary:
#
# Using an OpenSSH server's ClientAliveInterval, it is possible for
# the ssh server to send periodic "keep alive" messages to the ssh
# client, keeping the connection open indefinitely. This is useful
# when a firewall or other packet filtering device drops idle
# connections after a certain period of time. Note that this is
# different from the KeepAlive directive in ssh_config.
#
# Client Alive messages are sent over the encrypted link, so they
# cannot be blocked or spoofed by a firewall. These settings tell
# the server to check the client every 30 seconds. If the client
# does not respond 40 times in a row then the session is closed.
# This allows for up to 20 minutes of network interruption.
#
ClientAliveInterval 30
ClientAliveCountMax 40

# Do not set MaxAuthTries to '''1''' because SSH first tries
# public key authentication which counts against the number
# of failed tries, so if the key fails then sshd will disconnect
# and never attempt to ask for a password.
#
MaxAuthTries 2

# Bot scripts often check specific accounts for weak passwords,
# so we deny these usernames (and we never use them for SSH).
# This is purely for security convenience.
#
DenyUsers root test admin guest nobody www www-data

# For extra security, allow access only to specific users.
# Replace "user1 user2 user3" with a list of users to allow.
#AllowUsers user1 user2 user3

##
#
# OpenSSH sshd
#
##

# UseDNS
#
# Specifies whether sshd(8) should look up the remote host name and
# check that the resolved host name for the remote IP address maps
# back to the very same IP address.  The default is "yes".
#
# Commentary:
#
# This option is mostly useless. Setting it off speeds up logins.
#
# If the client machines are out there on the Internet, there is a high
# chance that they don't have any reverse DNS, their reverse DNS doesn't
# resolve forward, or their DNS doesn't provide any information other than
# "belongs to this ISP" which the IP address already tells you.
#
# In typical configurations, DNS is only used for logging. It can be used
# for authentication, but only if IgnoreRhosts no is specified in
# sshd_config. This is for compatibility with old installations that used
# rsh, where you can say “the user called bob on the machine called
# darkstar may log in as alice without showing any credentials” (by writing
# darkstar bob in ~alice/.rhosts). It is only secure if you trust all the
# machines that may possibly be connecting to the ssh server. In other
# words, this is very very rarely usable in a secure way.
#
# Given that the DNS lookup doesn't provide any useful information except
# in very peculiar circumstances, it should be turned off. As far as I can
# tell, the only reason it's on by default is that it's technically more
# secure (if you're concerned about authentication, not availability), even
# though that only applies to a tiny set of circumstances.
#
# http://unix.stackexchange.com/questions/56941/what-is-the-point-of-sshd-usedns-option
#
UseDNS no

# AcceptEnv
#
# Specifies what environment variables sent by the client will be
# copied into the session's environ(7). See SendEnv in ssh_config(5)
# for how to configure the client.
#
# Note that environment passing is only supported for protocol 2, and
# that the TERM environment variable is always sent whenever the
# client requests a pseudo-terminal as it is required by the protocol.
#
# Variables are specified by name, which may contain the wildcard
# characters ‘*’ and ‘?’. Multiple environment variables may be
# separated by whitespace or spread across multiple AcceptEnv
# directives.
#
# Be warned that some environment variables could be used to bypass
# restricted user environments. For this reason, care should be taken
# in the use of this directive.
#
# The default is not to accept any environment variables.
#
# Commentary:
#
# We want locale environment variables, such as language settings.
#
AcceptEnv LANG LC_*

# PermitTunnel
#
# Specifies whether tun(4) device forwarding is allowed. The argument
# must be “yes”, “point-to-point” (layer 3), “ethernet” (layer 2), or
# “no”. Specifying “yes” permits both “point-to-point” and “ethernet”.
#
# The default is “no”. Independent of this setting, the permissions of
# the selected tun(4) device must allow access to the user.
#
# Commentary:
#
# We enable the tunnel because it's needed for VPN.
#
PermitTunnel yes
